---
# The GitHub repository is mirrored to GitLab.com, where continuous builds
# are performed for Linux and HTML5 platforms using GitLab CI.
#
# Download builds: https://bintray.com/calinou/godot/editor/_latestVersion#files
# GitLab repository: https://gitlab.com/Calinou/godot-builds
#
# This build script is licensed under CC0 1.0 Universal:
# https://creativecommons.org/publicdomain/zero/1.0/

stages:
  - build
  - package
  - deploy

##
## Helpers
##

# Deployment helper macro (used in all `deploy` stages)

.deploy: &deploy
  stage: deploy
  image: ubuntu:xenial
  before_script:
    - apt-get update -y
    - apt-get install -y git wget ruby rpl
    - gem install dpl
  script:
    - wget -q https://raw.githubusercontent.com/Calinou/godot-builds/master/.bintray.json -O .bintray.json
    - VERSION=$(git rev-parse --short HEAD | head -c 7)
    - DATE=$(git log -1 --format=%cd --date=short)
    - rpl "#[INCLUDE_PATTERN]" "$INCLUDE_PATTERN" .bintray.json # The variable is defined in each job
    - rpl "#[UPLOAD_PATTERN]" "$UPLOAD_PATTERN" .bintray.json   # The variable is defined in each job
    - rpl "#[VERSION]" "$DATE.$VERSION" .bintray.json           # Replace the version *after* replacing the upload pattern, because it also is contained in the upload pattern
    - rpl "#[DATE]" "$DATE" .bintray.json
    - dpl --provider=bintray --file=.bintray.json --user=Calinou --key=$BINTRAY_API_KEY

# Install dependencies before building or (sometimes) packaging

.install_dependencies: &install_dependencies
  before_script:
    - apt-get update -y
    - apt-get install -y git cmake wget build-essential scons pkg-config libx11-dev libxcursor-dev libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libfreetype6-dev libssl-dev libudev-dev libxrandr-dev
    - git clone https://github.com/godotengine/godot.git
    - cd godot/
##
## Linux editor
##

# TODO: Build 32-bit Linux editor.

build:linux_editor:
  stage: build
  image: ubuntu:trusty
  <<: *install_dependencies
  script:
    - scons platform=x11 tools=yes target=release_debug builtin_openssl=yes builtin_libpng=yes verbose=no warnings=no progress=no -j$(nproc)
    - strip bin/godot.x11.opt.tools.64
  artifacts:
    when: on_success
    expire_in: 2d
    paths:
      - godot/bin/godot.x11.opt.tools.64

package:linux_editor:
  stage: package
  image: ubuntu:trusty
  dependencies:
    - build:linux_editor
  <<: *install_dependencies
  script:
    - mkdir -p appdir/usr/bin/ appdir/usr/share/icons
    - cp bin/godot.x11.opt.tools.64 appdir/usr/bin/godot
    - cp misc/dist/appimage/godot.desktop appdir/godot.desktop
    - cp icon.svg appdir/usr/share/icons/godot.svg
    - wget https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
    - chmod +x linuxdeployqt-continuous-x86_64.AppImage
    - ./linuxdeployqt-continuous-x86_64.AppImage --appimage-extract
    - ./squashfs-root/AppRun appdir/godot.desktop -appimage
    - mv Godot_Engine-x86_64.AppImage bin/
  artifacts:
    when: on_success
    expire_in: 2d
    paths:
      - godot/bin/Godot_Engine-x86_64.AppImage

deploy:linux_editor:
  dependencies:
    - package:linux_editor
  variables:
    INCLUDE_PATTERN: "godot/bin/Godot_Engine-x86_64.AppImage"
    UPLOAD_PATTERN: "Godot-Linux-x86_64-#[VERSION].AppImage"
  <<: *deploy

##
## Linux export templates
##

# TODO: Build 32-bit Linux export templates. For now, the 64-bit templates are copied to 32-bit templates,
# to prevent errors from appearing in the export dialog.

build:linux_templates:
  stage: build
  image: ubuntu:trusty
  <<: *install_dependencies
  script:
    - scons platform=x11 tools=no target=release_debug builtin_openssl=yes builtin_libpng=yes verbose=no warnings=no progress=no -j$(nproc)
    - scons platform=x11 tools=no target=release builtin_openssl=yes builtin_libpng=yes verbose=no warnings=no progress=no -j$(nproc)
    - strip bin/godot.*.64
  artifacts:
    when: on_success
    expire_in: 2d
    paths:
      - godot/bin/godot.x11.opt.debug.64
      - godot/bin/godot.x11.opt.64

package:linux_templates:
  stage: package
  image: ubuntu:trusty
  dependencies:
    - build:linux_templates
  before_script:
    - apt-get update -y
    - apt-get install -y zip
  script:
    - cd bin/
    - mkdir templates/
    - echo "3.0-alpha" > templates/version.txt
    - mv godot.x11.opt.debug.64 templates/linux_x11_64_debug
    - mv godot.x11.opt.64 templates/linux_x11_64_release
    - cp templates/linux_x11_64_debug templates/linux_x11_32_debug
    - cp templates/linux_x11_64_release templates/linux_x11_32_release
    - zip -9 Godot-Templates-Linux.tpz templates/*
  artifacts:
    when: on_success
    expire_in: 2d
    paths:
      - godot/bin/Godot-Templates-Linux.tpz

deploy:linux_templates:
  dependencies:
    - package:linux_templates
  variables:
    INCLUDE_PATTERN: "godot/bin/Godot-Templates-Linux.tpz"
    UPLOAD_PATTERN: "templates/Godot-Templates-Linux-#[VERSION].tpz"
  <<: *deploy

##
## HTML5
##

build:html5:
  stage: build
  image: ubuntu:xenial
  <<: *install_dependencies
  script:
    - cd $HOME
    - wget https://s3.amazonaws.com/mozilla-games/emscripten/releases/emsdk-portable.tar.gz
    - tar xf emsdk-portable.tar.gz
    - cd emsdk-portable/; ./emsdk update; ./emsdk install latest; ./emsdk activate latest
    - source ./emsdk_env.sh
    - export EMSCRIPTEN_ROOT=$(em-config EMSCRIPTEN_ROOT)
    - cd $CI_PROJECT_DIR/godot/
    - scons platform=javascript wasm=yes tools=no target=release_debug verbose=no warnings=no progress=no -j$(nproc)
    - scons platform=javascript wasm=yes tools=no target=release verbose=no warnings=no progress=no -j$(nproc)
    - scons platform=javascript wasm=no tools=no target=release_debug verbose=no warnings=no progress=no -j$(nproc)
    - scons platform=javascript wasm=no tools=no target=release verbose=no warnings=no progress=no -j$(nproc)
  artifacts:
    when: on_success
    expire_in: 2d
    paths:
      - godot/bin/

package:html5:
  stage: package
  image: ubuntu:xenial
  dependencies:
    - build:html5
  before_script:
    - apt-get update -y
    - apt-get install -y zip
  script:
    - cd bin/
    - mkdir templates/
    - echo "3.0-alpha" > templates/version.txt
    - mv godot.javascript.opt.debug.webassembly.zip templates/webassembly_debug.zip
    - mv godot.javascript.opt.webassembly.zip templates/webassembly_release.zip
    - mv godot.javascript.opt.debug.zip templates/javascript_debug.zip
    - mv godot.javascript.opt.zip templates/javascript_release.zip
    - zip -9 Godot-Templates-HTML5.tpz templates/*
  artifacts:
    when: on_success
    expire_in: 2d
    paths:
      - godot/bin/Godot-Templates-HTML5.tpz

deploy:html5:
  dependencies:
    - package:html5
  variables:
    INCLUDE_PATTERN: "godot/bin/Godot-Templates-HTML5.tpz"
    UPLOAD_PATTERN: "templates/Godot-Templates-HTML5-#[VERSION].tpz"
  <<: *deploy
